const fs = require('fs')
import removeAccents from 'remove-accents';
const sharp = require('sharp');

export class ImageRepositoryService {

    private root = "";

    constructor(dir:string) {
        if (dir.substring(0, 1) === "/") dir = dir.substring(1); // odstran prvy slash
        if (dir.length > 0 &&  dir[dir.length - 1] === "/") dir = dir.substring(0, dir.length); // odstran posledny slash

        var dirs = dir.split("/");
        try {
            this.root = "";
            for (var i in dirs) {
                this.root += dirs[i] + "/";
                this.createDirIfNotExists(this.root);
            }            
        }
        catch(e) {
            console.log(e);
        }
    }    

    private createDirIfNotExists(path:string){
        if (!fs.existsSync(path)) fs.mkdirSync(path);
    }

    /** inkl. / */
    private getDirPathForUser(userId:number):string {
        return this.root + userId.toString() + "/";
    }

    private ensureExistsUserDir(userId:number) {
        this.createDirIfNotExists(this.getDirPathForUser(userId));
    }

    /** Povolene au len a-z, A-Z, 0-9, "-", "." a "_": Vsetky ostatne znaky sa nahradia za "_" */
    private normaliseFilename(fn: string):string {
        fn = removeAccents(fn);
        const validChars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789_-.";
        let ret = "";
        for (var i = 0; i < fn.length; i++) {
            var ch = fn[i];
            if (validChars.indexOf(ch) < 0) ch = "_";
            ret += ch;
        }
        return ret;
    }

    async saveImage(fileName:string, mimetype:string, userId:number, tempFilePath:string )
    : Promise<{ error?: string; path?: string; thumbnailPath?: string; }>
     {
        // pripava
        fileName = this.normaliseFilename(fileName);
        this.ensureExistsUserDir(userId);
        var dir = this.getDirPathForUser(userId);

        // priprava na "hugo(2).jpg", "hugo(3).jpg", "hugo(4).jpg" ...
        var pureFileName = fileName, extension = ""; // "hugo.jpg" -> "hugo", "jpg"
        {
            var i = fileName.lastIndexOf(".");
            if (i >=0 ){
                pureFileName = fileName.substring(0, i);
                extension = fileName.substring(i + 1);
            }
        }

        // primitivna kontrola. Chcelo by to cez sharp, ale neviem odchytit chybu...
        const imagesExt = ["gif", "jpg", "jpeg", "png", "bmp", "ico", "tiff"];
        if (imagesExt.indexOf(extension.toLowerCase()) < 0 ){
            return {
                error: `Subor s priponov "${extension}" nevyzera byt obrazok.`
            }
        }

        // druha primitivna kontrola podla content-type
        const imagesMT = ["image/gif", "image/jpeg", "image/png", "image/bmp", "image/x-icon", "image/tiff"];
        if (imagesMT.indexOf(mimetype.toLowerCase()) < 0 ){
            return {
                error: `Mime-Type "${mimetype}" nevyzera byt obrazok.`
            }
        }


        // skutocne meno suboru aj nahladu
        var savePath = `${dir}${fileName}`;
        var tnPath = `${dir}_${fileName}`;
        var counter = 1;
        while (fs.existsSync(savePath)) {
            counter++;
            savePath = `${dir}${pureFileName}(${counter})`; // "...../345324759_hugo.jpg" -> "...../345324759_hugo(2).jpg"
            tnPath = `${dir}_${pureFileName}(${counter})`;
            if (extension !== "") {
                savePath += "." + extension;
                tnPath += "." + extension;
            }            
        }        
        await fs.copyFile(tempFilePath, savePath, fs.constants.COPYFILE_EXCL, (err:any) => { });
                
        // zistenie rozmerov
        const md = await sharp(tempFilePath).metadata();
        const h = <number>md.height;
        const w = <number>md.width;        

        const MAX_SIZE = 1000;

        if ( h > MAX_SIZE || w > MAX_SIZE) {            
            let zoom = MAX_SIZE / h; // na vysku
            if (w > h) zoom = MAX_SIZE / w; // na sirku

            // tu by to chcelo odchytit chybu, ale nic nezabralo...
            sharp(tempFilePath)
            .resize(Math.floor(w * zoom), Math.floor(h * zoom))
            .toFile(savePath);
        }
        else {
            // priamo kopiruj
            await fs.copyFile(tempFilePath, savePath, fs.constants.COPYFILE_EXCL, (err:any) => { });
        }

        // urob thumbnail

        const TN_SIZE = 96; // thumbnail size
        let tnZoom = TN_SIZE / h; // na vysku
        if (w > h) tnZoom = TN_SIZE / w; // na sirku
        
        // tu by to chcelo odchytit chybu, ale nic nezabralo...
        sharp(tempFilePath)
        .resize(Math.floor(w * tnZoom), Math.floor(h * tnZoom))
        .toFile(tnPath);

        return {
            path: savePath,
            thumbnailPath: tnPath
        }
        
    }


}

// export var imageRepositoryService = new ImageRepositoryService();

